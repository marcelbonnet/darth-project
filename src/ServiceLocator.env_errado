<?php
namespace Darth\Core;

//mudar para ModuloServiceLocator ??? essa classe tem a Responsabilidade de registrar interfaces para módulos

/**
 * @see https://github.com/domnikl/DesignPatternsPHP/tree/master/More/ServiceLocator Padrão Service Locator
 */
class ServiceLocator implements ServiceLocatorInterface
{

    private function lookup($name, $interface, $val)
    {
        #$env = \Darth\Core\ControllerHelper::getSlimInstance()->environment();
        $env = \Darth\Core\ControllerHelper::getSlimEnv();
        if ($env["darth.servicelocator.".$name] === null)
            $env["darth.servicelocator.".$name] = array();
        #$env["darth.servicelocator.".$name][$interface] = $val; # Indirect modification of overloaded element of Slim\Environment has no effect
        $envServices = $env["darth.servicelocator.".$name];
        $envServices[$interface] = $val;
        $env["darth.servicelocator.".$name] = $envServices;
        
    }

    private static $instancia = null;

    private function __construct(/*ServiceArrayConfig $config*/)
    {
        //$this->add($config->getInterface(), $config->getService(), $config->isShared());
        //\Darth\Core\ControllerHelper::getSlimInstance($app)->environment()["darth.servicelocator.services"]
    }

    //não tem efeito se não for injetado no app/contexto do Slim
    public static function getInstance()
    {
        if (self::$instancia === null) {
            self::$instancia = new ServiceLocator();
            #\Doctrine\Common\Util\Debug::dump("criou nova instância");
        }
        return self::$instancia;
    
    }
/*
    private  $env = array();
    //injeção de dependência
    public function setEnv(&$val) 
    {
        $this->env =&$val; 
        $a = &$this->env;
        \Doctrine\Common\Util\Debug::dump($a()["teste"]);
        $a()["teste"] = "FOO";
        \Doctrine\Common\Util\Debug::dump($a()["teste"]);

        $this->services = $a()["darth.servicelocator.services"];
        $this->instantiated = $a()["darth.servicelocator.instantiated"];
        $this->shared = $a()["darth.servicelocator.shared"];
    }

*/
    /**
     * Registra o serviço a partir de uma Interface
     *
     * @param string        $interface FQCN da interface sem a barra no começo
     * @param string|object $service instância de um objeto que implementa $interface
     * @param bool          $share se o serviço é compartilhado
     */
    public function add($interface, $service, $share = true)
    {
        /*
         * When you add a service, you should register it
         * with its interface or with a string that you can use
         * in the future even if you will change the service implementation.
         */
        if (is_object($service) && $share) {
            $this->lookup("objects", $interface, $service);
        }
        $this->lookup("services",$interface, (is_object($service) ? get_class($service) : $service) );
        $this->lookup("shared",$interface,$share);
    }
    /**
     * Checks if a service is registered.
     *
     * @param string $interface
     *
     * @return bool
     */
    public function has($interface)
    {
        $services = \Darth\Core\ControllerHelper::getSlimInstance()->environment()["darth.servicelocator.services"][$interface];
        $objects = \Darth\Core\ControllerHelper::getSlimInstance()->environment()["darth.servicelocator.objects"][$interface];
        return isset( $services ) || isset( $objects ) ;
    }
    /**
     * Gets the service registered for the interface.
     *
     * @param string $interface
     *
     * @return mixed
     */
    public function get($interface)
    {
        $envObjectInterface = \Darth\Core\ControllerHelper::getSlimInstance()->environment()["darth.servicelocator.objects"][$interface];
        $envSharedInterface = \Darth\Core\ControllerHelper::getSlimInstance()->environment()["darth.servicelocator.shared"][$interface];
        $envServiceInterface = \Darth\Core\ControllerHelper::getSlimInstance()->environment()["darth.servicelocator.services"][$interface];
        
        // Retrieves the instance if it exists and it is shared
        if ( isset($envObjectInterface) && $envSharedInterface) {
            return $envObjectInterface;
        }
        // otherwise gets the service registered.
        $service = $envServiceInterface;
        // You should check if the service class exists and
        // the class is instantiable.
        // This example is a simple implementation, but
        // when you create a service, you can decide
        // if $service is a factory or a class.
        // By registering a factory you can create your services
        // using the DependencyInjection pattern.
        // ...
        // Creates the service object
        $object = new $service();
        // and saves it if the service must be shared.
        if ($envSharedInterface) {
            $this->lookup("objects", $interface, $service);
        }
        return $object;
    }

    public function getInterfaces()
    {
        return \Darth\Core\ControllerHelper::getSlimInstance()->environment()["darth.servicelocator.services"];
    }

}
